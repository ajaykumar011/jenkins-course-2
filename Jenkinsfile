pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS') 
        timestamps() 
        buildDiscarder(logRotator(numToKeepStr: '5'))
        skipDefaultCheckout() //skips the default checkout.
        //checkoutToSubdirectory('subdirectory') //checkout to a subdirectory
        // preserveStashes()   Preserve stashes from completed builds, for use with stage restarting
        }
    // environment {
    //     FULL_PATH_BRANCH = "${sh(script:'git name-rev --name-only HEAD', returnStdout: true)}"
    //     GIT_BRANCH = FULL_PATH_BRANCH.substring(FULL_PATH_BRANCH.lastIndexOf('/') + 1, FULL_PATH_BRANCH.length())
    //     }
        
    stages {
        stage('Options-check') {
            steps {
                script{
                    //git branch: 'Your Branch name', credentialsId: 'Your crendiatails', url: ' Your BitBucket Repo URL '
                    git branch: 'master', credentialsId: 'bitbucket-cred', url: 'https://bitbucket.org/jenkins-all-in-one/just-test/'
                    echo 'Pulling... ' + env.GIT_BRANCH
                    sh 'printenv'
                   
                    //sh "ls -la ${pwd()}"  
                    sh "tree ${env.WORKSPACE}"
                }
            }
        }
    }
}


// buildDiscarder
// Persist artifacts and console output for the specific number of recent Pipeline runs. For example: options { buildDiscarder(logRotator(numToKeepStr: '1')) }

// checkoutToSubdirectory
// Perform the automatic source control checkout in a subdirectory of the workspace. For example: options { checkoutToSubdirectory('foo') }

// disableConcurrentBuilds
// Disallow concurrent executions of the Pipeline. Can be useful for preventing simultaneous accesses to shared resources, etc. For example: options { disableConcurrentBuilds() }

// disableResume
// Do not allow the pipeline to resume if the master restarts. For example: options { disableResume() }

// newContainerPerStage
// Used with docker or dockerfile top-level agent. When specified, each stage will run in a new container instance on the same node, rather than all stages running in the same container instance.

// overrideIndexTriggers
// Allows overriding default treatment of branch indexing triggers. If branch indexing triggers are disabled at the multibranch or organization label, options { overrideIndexTriggers(true) } will enable them for this job only. Otherwise, options { overrideIndexTriggers(false) } will disable branch indexing triggers for this job only.

// preserveStashes
// Preserve stashes from completed builds, for use with stage restarting. For example: options { preserveStashes() } to preserve the stashes from the most recent completed build, or options { preserveStashes(buildCount: 5) } to preserve the stashes from the five most recent completed builds.

// quietPeriod
// Set the quiet period, in seconds, for the Pipeline, overriding the global default. For example: options { quietPeriod(30) }

// retry
// On failure, retry the entire Pipeline the specified number of times. For example: options { retry(3) }

// skipDefaultCheckout
// Skip checking out code from source control by default in the agent directive. For example: options { skipDefaultCheckout() }

// skipStagesAfterUnstable
// Skip stages once the build status has gone to UNSTABLE. For example: options { skipStagesAfterUnstable() }

// timeout
// Set a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline. For example: options { timeout(time: 1, unit: 'HOURS') }

// timestamps
// Prepend all console output generated by the Pipeline run with the time at which the line was emitted. For example: options { timestamps() }

// parallelsAlwaysFailFast
// Set failfast true for all subsequent parallel stages in the pipeline. For example: options { parallelsAlwaysFailFast() }
